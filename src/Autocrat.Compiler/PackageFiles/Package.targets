<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="Autocrat.Compiler.AutocratTask"
             AssemblyFile="$(AutocratCompiler)" />
  
  <Target Name="AutocratTarget"
          AfterTargets="Publish"
          DependsOnTargets="ResolveAssemblyReferences;_GetAssemblyInfoFromTemplateFile">

    <ItemGroup>
      <AdditionalProjectOptions Include="AutocratContentDir=$(AutocratContentDir)" />
      <AdditionalProjectOptions Include="AutocratNativeAdapters=$(AutocratNativeAdapters)" />
      <AdditionalProjectOptions Include="AutocratNativeTargets=$(AutocratNativeTargets)" />
      <AdditionalProjectOptions Include="AutocratOutputAssembly=$(AutocratOutputAssembly)" />
      <AdditionalProjectOptions Include="AutocratOutputSource=$(AutocratOutputSource)" />
      <AdditionalProjectOptions Include="Configuration=$(Configuration)" />
      <AdditionalProjectOptions Include="PublishDir=publish" />
      <AdditionalProjectOptions Include="RestoreSources=$(RestoreSources)" />

      <!-- Use the absolute path for the output so that it's relative to the current project not the temp one -->
      <AdditionalProjectOptions Include="OutputName=$([System.IO.Path]::GetFullPath('$(PublishDir)'))$(TargetName)" />

      <!-- Make sure all the dependencies are available -->
      <PublishedFiles Include="$(PublishDir)*.*" />
      <ReferencePath Include="$(AutocratNativeAdapters)" />
    </ItemGroup>

    <AutocratTask Description="$(Description)"
                  OutputAssembly="$(AutocratOutputAssembly)"
                  OutputSource="$(AutocratOutputSource)"
                  References="@(ReferencePath)"
                  Sources="@(Compile)"
                  Version="$(Version)" />

    <Move SourceFiles="@(PublishedFiles)"
          DestinationFolder="$(AutocratOutputDirectory)" />
    
    <Copy SourceFiles="$(AutocratContentDir)$(AutocratManagedProject)"
          DestinationFolder="$(AutocratOutputDirectory)" />
    
    <Copy SourceFiles="$(AutocratContentDir)$(AutocratNativeProject)"
          DestinationFolder="$(AutocratOutputDirectory)" />
    
    <!-- Restore platform specific packages -->
    <MSBuild Projects="$(AutocratContentDir)$(AutocratDependenciesProject)"
             Properties="@(AdditionalProjectOptions)"
             Targets="RestoreCoreRT">
      <Output TaskParameter="TargetOutputs"
              ItemName="RestoreOutput" />
    </MSBuild>
    <ItemGroup>
      <AdditionalProjectOptions Include="IlcPath=%(RestoreOutput.Identity)" />
    </ItemGroup>
    
    <!-- Manually restore the managed project -->
    <MSBuild Projects="$(AutocratOutputDirectory)$(AutocratManagedProject)"
             Properties="@(AdditionalProjectOptions);RestorePackagesPath=$(RestorePackagesPath)"
             Targets="Restore" />
    
    <!-- Compile the native and managed projects in parallel -->
    <MSBuild BuildInParallel="True"
             Projects="$(AutocratOutputDirectory)$(AutocratManagedProject);$(AutocratOutputDirectory)$(AutocratNativeProject)"
             Properties="@(AdditionalProjectOptions)"
             Targets="Build;Publish" />
    
    <!-- Link the two project outputs together -->
    <MSBuild Projects="$(AutocratOutputDirectory)$(AutocratNativeProject)"
             Properties="@(AdditionalProjectOptions)"
             Targets="Link" />

    <!-- Do a little cleaning -->
    <RemoveDir Directories="$(AutocratOutputDirectory)bin;$(AutocratOutputDirectory)publish" />

  </Target>

  <Target Name="AutocratCopyOutputFiles"
          AfterTargets="AutocratTarget">
    <ItemGroup>
      <!-- Exclude the compiler added files -->
      <FilteredTargets Include="@(_NoneWithTargetPath)"
                       Condition="'%(_NoneWithTargetPath.Link)'==''" />

      <AdditionalItemsAlways Include="@(FilteredTargets->'%(FullPath)')"
                             Condition="'%(FilteredTargets.CopyToPublishDirectory)'=='Always'"/>
      <AdditionalItemsPreserveNewest Include="@(FilteredTargets->'%(FullPath)')"
                                     Condition="'%(FilteredTargets.CopyToPublishDirectory)'=='PreserveNewest'"/>
    </ItemGroup>

    <Copy SourceFiles="@(AdditionalItemsPreserveNewest)"
          DestinationFolder="$(PublishDir)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForPublishFilesIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForPublishFilesIfPossible)" />

    <Copy SourceFiles="@(AdditionalItemsAlways)"
          DestinationFolder="$(PublishDir)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForPublishFilesIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForPublishFilesIfPossible)" />

  </Target>

</Project>
